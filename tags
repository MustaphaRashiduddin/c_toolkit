!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
MALLOC	sayf_debug/sayf_memory.h	/^#define MALLOC(/;"	d
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
MallocedDataInfo	sayf_debug/sayf_memory.c	/^struct MallocedDataInfo {$/;"	s	file:
MallocedDataInfo	sayf_debug/sayf_memory.c	/^typedef struct MallocedDataInfo MallocedDataInfo;$/;"	t	typeref:struct:MallocedDataInfo	file:
Node	ds/linked_list.h	/^struct Node {$/;"	s
Node	ds/linked_list.h	/^typedef struct Node Node;$/;"	t	typeref:struct:Node
Node	sayf_debug/sayf_memory.c	/^struct Node {$/;"	s	file:
Node	sayf_debug/sayf_memory.c	/^typedef struct Node Node;$/;"	t	typeref:struct:Node	file:
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
__LINKED_LIST_H__	ds/linked_list.h	/^#define __LINKED_LIST_H__$/;"	d
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
create	ds/linked_list.c	/^Node *create(void *data)$/;"	f
data	ds/linked_list.h	/^    void *data;$/;"	m	struct:Node
data	sayf_debug/sayf_memory.c	/^    void* data;$/;"	m	struct:Node	file:
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
dealloc	ds/linked_list.c	/^Node *dealloc(Node *current)$/;"	f
death_walker	ds/linked_list.c	/^void death_walker(Node *current, void *data) $/;"	f
del	ds/linked_list.c	/^void del(Node **current, void *data)$/;"	f
file	sayf_debug/sayf_memory.c	/^    const char* file;$/;"	m	struct:MallocedDataInfo	file:
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
func	sayf_debug/sayf_memory.c	/^    const char* func;$/;"	m	struct:MallocedDataInfo	file:
id	sayf_debug/sayf_memory.c	/^    const char* id;$/;"	m	struct:MallocedDataInfo	file:
line	sayf_debug/sayf_memory.c	/^    const int line;$/;"	m	struct:MallocedDataInfo	file:
main	ds/main.c	/^int main(int argc, char **argv) {$/;"	f
main	ds/voidPointerTut.c	/^int main(int argc, char **argv)$/;"	f
main	main.c	/^int main(int argc, char **argv)$/;"	f
main	tuts/main.c	/^int main(int argc, char** argv)$/;"	f
malloc_and_log	sayf_debug/sayf_memory.c	/^void* malloc_and_log(const char* file, const char* func, const int line,$/;"	f
my_malloc	tuts/main.c	/^void my_malloc(void** p, size_t size)$/;"	f
n	sayf_debug/sayf_memory.c	/^    const int n;$/;"	m	struct:MallocedDataInfo	file:
next	ds/linked_list.h	/^    Node *next;$/;"	m	struct:Node
next	sayf_debug/sayf_memory.c	/^    Node* next;$/;"	m	struct:Node	file:
os	.ycm_extra_conf.py	/^import os$/;"	i
print	ds/linked_list.c	/^void print(Node *current, void (*ptr_print_node)(Node *current))$/;"	f
print_int_node	ds/main.c	/^void print_int_node(Node *current)$/;"	f
print_string_node	ds/main.c	/^void print_string_node(Node *current)$/;"	f
push	ds/linked_list.c	/^void push(Node *current, void *data)$/;"	f
sayf_memory_end	sayf_debug/sayf_memory.c	/^void sayf_memory_end() {$/;"	f
sayf_memory_start	sayf_debug/sayf_memory.c	/^void sayf_memory_start() {$/;"	f
size	sayf_debug/sayf_memory.c	/^    const size_t size;$/;"	m	struct:MallocedDataInfo	file:
walker	ds/linked_list.c	/^Node *walker(Node *current)$/;"	f
ycm_core	.ycm_extra_conf.py	/^import ycm_core$/;"	i
